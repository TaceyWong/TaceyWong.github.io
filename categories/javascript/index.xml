<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Tacey</title>
    <link>https://taceywong.github.io/categories/javascript/</link>
    <description>Recent content in Javascript on Tacey</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Sep 2018 14:01:11 +0800</lastBuildDate>
    
	<atom:link href="https://taceywong.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Javascript实现类的几种方法</title>
      <link>https://taceywong.github.io/post/javascript-class/</link>
      <pubDate>Sun, 23 Sep 2018 14:01:11 +0800</pubDate>
      
      <guid>https://taceywong.github.io/post/javascript-class/</guid>
      <description>参考：阮一峰-Javascript定义类（class）的三种方法
编写和维护如此复杂的代码，必须使用模块化策略。目前，业界的主流做法是采用&amp;rdquo;面向对象编程&amp;rdquo;。因此，Javascript如何实现面向对象编程，就成了一个热门课题。麻烦的是，Javascipt语法不支持&amp;rdquo;类&amp;rdquo;（class）（ES6已经引入class关键字），导致传统的面向对象编程方法无法直接使用。程序员们做了很多探索，研究如何用Javascript模拟&amp;rdquo;类&amp;rdquo;。本文总结了Javascript定义&amp;rdquo;类&amp;rdquo;的几种方法。
一、构造函数法 使用构造函数模拟类，在其内部用this关键字只带实例对象。
function Car(){ this.brand = &amp;quot;Tesla&amp;quot;; }  生成实例的时候，使用new关键字。
var one_car = new Car(); console.log(one_car);  类的属性和方法，可以定义在构造函数的prototype对象之上。
Car.prototype.makeSound = function(){ console.log(&amp;quot;滴滴&amp;quot;); }  二、Object.create()方法 为了解决&amp;rdquo;构造函数法&amp;rdquo;的缺点，更方便地生成对象，Javascript的国际标准ECMAScript第五版（目前通行的是第三版），提出了一个新的方法Object.create()。
用这个方法 “类”就是一个对象，不是函数。
var Car = { brand : &amp;quot;Tesla&amp;quot;, makeSound : function(){console.log(&amp;quot;滴滴&amp;quot;)} }  然后直接用Object.create()生成实例，不需要用到new
var one_car = Object.create(cat); console.log(one_car.brand);//Tesla one_car.makeSound();//滴滴  如果遇到浏览器不支持Object.create()可以自己模拟实现
if (!Object.create){ Object.create = function(o){ function F(){} F.prototype = o; return new F(); }; }  这种方法比“构造函数方法“简单，但是不能实现私有属性和私有方法，实例对象之间也不能共享数据，对”类“的模拟不够全面。
三、极简主义法 荷兰程序员Gabor de Mooij提出了一种比Object.</description>
    </item>
    
  </channel>
</rss>